<!DOCTYPE html>
<html lang="en" media="screen">
	<head>
		 <meta name="viewport" content="width=device-width, initial-scale=1.0">
		 <title> Sprout: Create Event </title>


		 <!--CSS-->
		<!--STYLESHEET CSS-->
		<link rel="stylesheet" href="/assets/stylesheets/event.css">

		<!--CSS BOOTSTRAP-->
		<!-- Latest compiled and minified CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
		<!-- Optional theme -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">
		<!-- Latest compiled and minified JavaScript -->
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>


		<!--API KEYS-->
		<!--JQUERY LIBRARY CALL-->
		<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
		<!--GMAIL CLIENT ID
		<meta name="google-signin-scope" content="profile email">
		<meta name="google-signin-client_id" content="123994681641-6q5qoage466aob7ul4uef8sidfov02vv.apps.googleusercontent.com">
	-->
		<!--GOOGLE PLACES MAP SEARCH API-->
		<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBq3UHdNNgslxsVag-WHL-YJHYzJ0kwrjk&libraries=places&callback=initAutocomplete"
         async defer></script>


		<!--JS FUNCTIONS-->
		<!--GOOGLE ADDRESS AUTOFILL FORM FIELD
		<script>
		  // This example displays an address form, using the autocomplete feature
		  // of the Google Places API to help users fill in the information.

		  // This example requires the Places library. Include the libraries=places
		  // parameter when you first load the API. For example:
		  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

		  var placeSearch, autocomplete;
		  var componentForm = {
			street_number: 'short_name',
			route: 'long_name',
			locality: 'long_name',
			administrative_area_level_1: 'short_name',
			country: 'long_name',
			postal_code: 'short_name'
		  };

		  function initAutocomplete() {
			// Create the autocomplete object, restricting the search to geographical
			// location types.
			autocomplete = new google.maps.places.Autocomplete(
				/** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
				{types: ['geocode']});

			// When the user selects an address from the dropdown, populate the address
			// fields in the form.
			autocomplete.addListener('place_changed', fillInAddress);
		  }

		  function fillInAddress() {
			// Get the place details from the autocomplete object.
			var place = autocomplete.getPlace();

			for (var component in componentForm) {
			  document.getElementById(component).value = '';
			  document.getElementById(component).disabled = false;
			}

			// Get each component of the address from the place details
			// and fill the corresponding field on the form.
			for (var i = 0; i < place.address_components.length; i++) {
			  var addressType = place.address_components[i].types[0];
			  if (componentForm[addressType]) {
				var val = place.address_components[i][componentForm[addressType]];
				document.getElementById(addressType).value = val;
			  }
			}
		  }

		  // Bias the autocomplete object to the user's geographical location,
		  // as supplied by the browser's 'navigator.geolocation' object.
		  function geolocate() {
			if (navigator.geolocation) {
			  navigator.geolocation.getCurrentPosition(function(position) {
				var geolocation = {
				  lat: position.coords.latitude,
				  lng: position.coords.longitude
				};

				console.log("User lat: " + geolocation.lat);
				console.log("User lng: " + geolocation.lng);
			  });
			}
		  }
		</script>-->

		<!--GOOGLE PLACES MAP SEARCH API-->
		<script>
		  // This example adds a search box to a map, using the Google Place Autocomplete
		  // feature. People can enter geographical searches. The search box will return a
		  // pick list containing a mix of places and predicted search terms.

		  // This example requires the Places library. Include the libraries=places
		  // parameter when you first load the API. For example:
		  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

		  function initAutocomplete() {
			var map = new google.maps.Map(document.getElementById('map'), {
			  center: {lat: -33.8688, lng: 151.2195},
			  zoom: 13,
			  mapTypeId: google.maps.MapTypeId.ROADMAP
			});

			// Create the search box and link it to the UI element.
			var input = document.getElementById('pac-input');
			var searchBox = new google.maps.places.SearchBox(input);
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

			// Bias the SearchBox results towards current map's viewport.
			map.addListener('bounds_changed', function() {
			  searchBox.setBounds(map.getBounds());
			});

			var markers = [];
			// Listen for the event fired when the user selects a prediction and retrieve
			// more details for that place.
			searchBox.addListener('places_changed', function() {
			  var places = searchBox.getPlaces();

			  if (places.length == 0) {
				return;
			  }

			  // Clear out the old markers.
			  markers.forEach(function(marker) {
				marker.setMap(null);
			  });
			  markers = [];

			  // For each place, get the icon, name and location.
			  var bounds = new google.maps.LatLngBounds();
			  places.forEach(function(place) {
				var icon = {
				  url: place.icon,
				  size: new google.maps.Size(71, 71),
				  origin: new google.maps.Point(0, 0),
				  anchor: new google.maps.Point(17, 34),
				  scaledSize: new google.maps.Size(25, 25)
				};

				// Create a marker for each place.
				markers.push(new google.maps.Marker({
				  map: map,
				  icon: icon,
				  title: place.name,
				  position: place.geometry.location
				}));

				if (place.geometry.viewport) {
				  // Only geocodes have viewport.
				  bounds.union(place.geometry.viewport);
				} else {
				  bounds.extend(place.geometry.location);
				}
			  });
			  map.fitBounds(bounds);
			});
		  }
		</script>
	</head>

	<body>
		<div id="container">
			<!--GOOGLE PLACES MAP SEARCH -->
			<input id="pac-input" class="controls" type="text" placeholder="Search Box">
			<div id="map"></div>


			<!--GOOGLE PLACE AUTOFILL
			<hr>
			<div id="locationField" onclick="initAutocomplete()">
				<input id="autocomplete" placeholder="Enter your address"
				 onFocus="geolocate()" type="text"></input>
			</div>

			<input class="field" id="street_number"
					  disabled="true"></input>

			<table id="address">
			  <tr>
				<td class="label">Street address</td>
				<td class="slimField"><input class="field" id="street_number"
					  disabled="true"></input></td>
				<td class="wideField" colspan="2"><input class="field" id="route"
					  disabled="true"></input></td>
			  </tr>
			  <tr>
				<td class="label">City</td>
				<td class="wideField" colspan="3"><input class="field" id="locality"
					  disabled="true"></input></td>
			  </tr>
			  <tr>
				<td class="label">State</td>
				<td class="slimField"><input class="field"
					  id="administrative_area_level_1" disabled="true"></input></td>
				<td class="label">Zip code</td>
				<td class="wideField"><input class="field" id="postal_code"
					  disabled="true"></input></td>
			  </tr>
			  <tr>
				<td class="label">Country</td>
				<td class="wideField" colspan="3"><input class="field"
					  id="country" disabled="true"></input></td>
			  </tr>
			</table>-->

			<!--FORM TO CREATE EVENT-->
			<div id='create_event'>
				<h1 class="jumbotron_header">Create Event</h1>
				<form class="form-horizontal" action='/add_event_db' method='post'>
					<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
					<p class="lead"> Event Title: </p>
					<input type='text' name='event_title'/>
					<p class="lead"> Location: </p>
					<input type='text' name='event_location'/>
					<p class="lead"> Start Time: </p> 
					<input type='date' name='event_start_date'/>
					<input type='time' step="1800" name='event_start_time'> 
					<p class="lead"> End Time: </p> 
					<input type='date' name='event_end_date'/>
					<input type='time' step="1800" name='event_end_time'> 
					<p class="lead"> Event Image: </p> 
					<input type='text' name='event_image' />
					<p class="lead"> Event Description: </p> 
					<input type='text' name='event_description' />
					<br><br>
					<input class="btn btn-primary" type='submit' value='Create Event' />
				</form>
				<br>
				<!--CREATE EVENT BACK BUTTON-->
				<form class="form-horizontal" action='/'>
					<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
					<input class="btn btn-primary" type='submit' value='Back' />
				</form>
			</div>
		</div>
	</body>
</html>




<!--<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">-->